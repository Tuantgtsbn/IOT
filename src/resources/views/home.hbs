<div class="content container">
  <div class="parent dashboard">
    <div class="row row-first justify-content-between">
      <div class="div1 col-12 col-md-3 box box-temperature">
        <div class="box_header">
          <h2 class="title">Temperature</h2>
        </div>
        <div class="box_body">
          <h1 class="value" data-id="1" data-field="Temperature">Loading...</h1>
          <p class="created_at"></p>

        </div>
        <div class="box_footer">
          <p class="status ">Loading...</p>
        </div>

      </div>
      <div class="div2 col-12 col-md-3 box box-humidity">
        <div class="box_header">
          <h2 class="title">Humidity</h2>
        </div>
        <div class="box_body">
          <h1 class="value" data-id="2" data-field="Humidity">Loading</h1>
          <p class="created_at"></p>
        </div>
        <div class="box_footer">
          <p class="status ">Loading...</p>
        </div>
      </div>
      <div class="div3 col-12 col-md-3 box box-gas">
        <div class="box_header">
          <h2 class="title">Gas</h2>
        </div>
        <div class="box_body">
          <h1 class="value" data-id="3" data-field="Gas">Loading</h1>
          <p class="created_at"></p>
        </div>
        <div class="box_footer">
          <p class="status ">Loading...</p>
        </div>
      </div>
    </div>
    <div class="row row-second justify-content-between ">

      <div class="div4 col-12 col-md-8 box box-chart">
        <div class="menu-chart">
          <button class="btn btn-secondary" type="button" data-id="1" data-unit="Â°C" data-field="Temperature">
            Temperature
          </button>
          <button class="btn btn-success" type="button" data-id="2" data-unit="%" data-field="Humidity">
            Humidity
          </button>
          <button class="btn btn-warning" type="button" data-id="3" data-unit="ppm" data-field="Gas">
            Gas
          </button>
        </div>
        <canvas id="ecgChart" width="600" height="300"></canvas>
      </div>
      <div class="div5 col-12 col-md-3">
        <div class="control-panel">
          <p class="control-panel-heading">Control panel</p>
          <div class="control-panel-body">
            <div class="control-panel-body__device row" data-id="4">
              <p class="control-panel-body__device-name col-12"></p>
              <div class="control-panel-body__device-img col-12">
                <svg height="800px" width="800px" style="width:100%; height:auto" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg"
                    xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 496 496" xml:space="preserve">
                    <path style="fill:#B3DCE0;" d="M496,309.6c0,27.2-6.4,48.8-32.8,48.8H32.8C5.6,358.4,0,336.8,0,309.6V186.4
	c0-27.2,21.6-48.8,48.8-48.8h398.4c27.2,0,48.8,21.6,48.8,48.8L496,309.6L496,309.6z" />
                    <g>
                      <path style="fill:#C1E3E5;"
                        d="M0,186.4c0-27.2,21.6-48.8,48.8-48.8h398.4c27.2,0,48.8,21.6,48.8,48.8" />
                    </g>
                    <path style="fill:#9ECACC;" d="M464.8,308.8c0,5.6-4,9.6-9.6,9.6H40.8c-5.6,0-9.6-4-9.6-9.6l0,0c0-5.6,4-9.6,9.6-9.6h414.4
	C460.8,299.2,464.8,303.2,464.8,308.8L464.8,308.8z" />
                    <path style="fill:#7EAAAA;"
                      d="M31.2,308.8L31.2,308.8c0-5.6,4-9.6,9.6-9.6h414.4c5.6,0,9.6,4,9.6,9.6l0,0" />
                    <path style="fill:#9ECACC;" d="M464.8,336c0,5.6-4,9.6-9.6,9.6H40.8c-5.6,0-9.6-4-9.6-9.6l0,0c0-5.6,4-9.6,9.6-9.6h414.4
	C460.8,326.4,464.8,330.4,464.8,336L464.8,336z" />
                    <path style="fill:#7EAAAA;"
                      d="M31.2,336L31.2,336c0-5.6,4-9.6,9.6-9.6h414.4c5.6,0,9.6,4,9.6,9.6l0,0" />
                    <path style="fill:#46BC5C;" d="M145.6,267.2c0,2.4-2.4,4.8-4.8,4.8H39.2c-2.4,0-4.8-2.4-4.8-4.8v-33.6c0-2.4,2.4-4.8,4.8-4.8h102.4
	c2.4,0,4.8,2.4,4.8,4.8v33.6H145.6z" />
                    <path style="fill:#2FA53F;"
                      d="M140.8,229.6c2.4,0,4.8,2.4,4.8,4.8V268c0,2.4-2.4,4.8-4.8,4.8H39.2c-2.4,0-4.8-2.4-4.8-4.8" />
                  </svg>
              </div>
              <p class="status">Connecting...</p>
              <div class="control-panel-body__device-action col-12">
                  <label for="automatic">Automatic</label>
                  <input type="checkbox" name="" id="automatic">
                  <button class="btn btn-primary" data-id="4"></button>

            
              </div>


            </div>
            <div class="control-panel-body__device row" data-id="5">
              <p class="control-panel-body__device-name col-12"></p>
              <div class="control-panel-body__device-img col-12">
                <svg width="800px" height="800px" style="width:100%; height:auto" viewBox="0 0 128 128" xmlns="http://www.w3.org/2000/svg"
                    xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img"
                    class="iconify iconify--noto" preserveAspectRatio="xMidYMid meet">

                    <ellipse cx="64" cy="116.87" rx="12.09" ry="7.13" fill="#424242">

                    </ellipse>

                    <path
                      d="M64 4C42.92 4 25.82 19.67 25.82 38.99c0 5.04 1.52 10.43 3.75 15.18c3.13 6.68 6.54 11.62 7.54 13.44c2.78 5.06 2.38 10.39 3.15 13.73c1.45 6.24 5.79 8.5 23.73 8.5s21.8-2.15 23.41-7.9c1.1-3.91.03-8.18 2.8-13.23c1-1.82 5.07-7.85 8.21-14.54c2.23-4.75 3.75-10.14 3.75-15.18C102.18 19.67 85.08 4 64 4z"
                      fill="#ffd600">

                    </path>

                    <ellipse cx="64" cy="86.13" rx="21.94" ry="4.46" fill="#b26500">

                    </ellipse>

                    <ellipse cx="64" cy="86.13" rx="21.94" ry="4.46" fill="#b26500">

                    </ellipse>

                    <ellipse cx="64" cy="86.13" rx="15.99" ry="2.06" fill="#ffa000">

                    </ellipse>

                    <g fill="none" stroke-width="2" stroke-miterlimit="10">

                      <path
                        d="M53.3 56.77c-.62 1.56-2.23 4.77-1.39 6.21c1.95 3.35 6.6 4.55 6.6 7.63c0 4.7-3.42 19.93-3.42 19.93"
                        stroke="#b26500">

                      </path>

                      <path d="M74.03 56.21s2.24 4.8 1.29 6.95c-.71 1.6-4.98 4.18-5.53 4.61c-2.55 2 .84 22.78.84 22.78"
                        stroke="#b26500">

                      </path>

                      <path
                        d="M53.3 56.77c3.44-6.8 5.21-22.32.84-21.53c-7.37 1.33 1.71 26.83 6.18 23.9s10.01-23.85 3.21-23.93c-6.8-.08.46 26.66 5.08 23.69c3.65-2.35 12.56-23.66 5.24-23.66c-6.23 0 .19 20.97.19 20.97"
                        stroke="#ffffff">

                      </path>

                    </g>

                    <path
                      d="M85.89 87.06S80.13 89.84 64 89.84s-21.89-2.78-21.89-2.78s-.36 5.14.83 7.47c1.43 2.8 2.53 3.77 2.53 3.77l.6 2.85l-.24.75c-.31.98-.09 2.06.6 2.83l.52.58l.58 2.74l-.2.55c-.38 1.05-.12 2.22.66 3.02l.38.39l.47 2.24s2.38 5.08 15.16 5.08s15.16-5.08 15.16-5.08l.04-.19l.26-.26c.52-.51.69-1.27.44-1.95l-.15-.39l.62-2.96l1.09-1.15c.54-.57.66-1.41.31-2.11l-.5-.99l.63-2.97l.4-.31c.59-.65.6-1.63.34-2.3c-.2-.53-.04-1.13.37-1.52c.63-.6 1.44-1.51 2.04-2.64c1.23-2.29.84-7.45.84-7.45z"
                      fill="#82aec0">

                    </path>

                    <path
                      d="M45.47 98.3l.54 2.87c5.82-.03 13.59.26 28.5-2.11c2.69-.61 5.92-1.82 2.35-1.32c0-.01-13.69 1.3-31.39.56z"
                      fill="#2f7889">

                    </path>

                    <path
                      d="M47.47 108.07c6.44-.11 19.6-.75 33.74-3.82l.63-2.97c-14.79 3.36-28.7 3.96-34.95 4.04l.58 2.75z"
                      fill="#2f7889">

                    </path>

                    <path
                      d="M80.31 108.49c-13.09 2.84-25.34 3.57-31.97 3.73l.43 2.04s.21 6.33 15.16 6.33s15.16-6.33 15.16-6.33s-6.38 1.82-14.23.93a.63.63 0 0 1-.01-1.26c4.69-.62 10.29-1.54 14.84-2.48l.62-2.96z"
                      fill="#2f7889">

                    </path>

                    <path d="M42.18 87.06s6.46 2.78 21.76 2.78s21.88-2.78 21.88-2.78" fill="none" stroke="#82aec0"
                      stroke-width="3.997" stroke-linecap="round" stroke-miterlimit="10">

                    </path>

                    <path
                      d="M49.88 10.32c3.91-.96 8-.48 10.8 2.92c.79.96 1.4 2.1 1.54 3.34c.28 2.39-1.2 4.65-2.96 6.31c-5.02 4.74-12.15 7.04-15.39 13.58c-.76 1.53-1.36 3.18-2.52 4.43c-1.16 1.25-3.09 2.01-4.6 1.21c-.8-.42-1.35-1.21-1.8-2c-2.84-5.06-2.63-11.51-.13-16.75c2.75-5.74 8.78-11.5 15.06-13.04z"
                      fill="#ffff8d">

                    </path>

                    <path
                      d="M46.45 91.93c-.88-.4-.53-1.72.43-1.65c3.22.25 8.7.56 15.95.56c7.64 0 14.36-.57 18.28-.99c.97-.1 1.34 1.23.45 1.64c-3.02 1.42-8.55 3.04-18.03 3.04c-9.25 0-14.35-1.37-17.08-2.6z"
                      fill="#ffd600">

                    </path>

                    <path
                      d="M51.94 102.03c-.67.24-1.36.57-1.7 1.19c-.12.23-.19.49-.14.75c.08.38.43.65.78.82c.7.34 1.49.43 2.26.44c1.59.02 3.17-.28 4.74-.58c.47-.09.95-.18 1.37-.41c.42-.23.78-.62.85-1.09c.1-.63-.35-1.24-.9-1.54c-1.9-1.05-5.34-.27-7.26.42z"
                      fill="#94d1e0">

                    </path>

                    <path
                      d="M53.43 108.62c-.67.24-1.36.57-1.7 1.19c-.12.23-.19.49-.14.75c.08.38.43.65.78.82c.7.34 1.49.43 2.26.44c1.59.02 3.17-.28 4.74-.58c.47-.09.95-.18 1.37-.41c.42-.23.78-.62.85-1.09c.1-.63-.35-1.24-.9-1.54c-1.9-1.04-5.35-.26-7.26.42z"
                      fill="#94d1e0">

                    </path>

                    <path
                      d="M50.01 84.2c.91.09 1.87.01 2.64-.48s1.26-1.49.95-2.35c-.16-.45-.51-.81-.85-1.15c-.75-.74-1.5-1.48-2.24-2.22c-.83-.83-1.66-1.65-2.56-2.4c-1.39-1.16-3.26-2.25-5.09-1.4c-1.56.72-1.93 2.14-1.24 3.63c1.47 3.13 4.89 6.01 8.39 6.37z"
                      fill="#ffff8d">

                    </path>

                  </svg>
              </div>
              <p class="status">Connecting...</p>
              <div class="control-panel-body__device-action col-12">
                
                  <button class="btn btn-primary" data-id="5"></button>

            
              </div>


            </div>
          </div>

        </div>
      </div>
    </div>
  </div>
</div>

<script defer src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- views/yourPage.handlebars -->
<script>
  var isESPCONNECTED = false;
  document.addEventListener('DOMContentLoaded', function () {
    const valueTemperature = document.querySelector('.box-temperature .value');
    const valueHumidity = document.querySelector('.box-humidity .value');
    const valueGas = document.querySelector('.box-gas .value');
    const valueStatusTemperature = document.querySelector('.box-temperature .status');
    const valueStatusHumidity = document.querySelector('.box-humidity .status');
    const valueStatusGas = document.querySelector('.box-gas .status');
    const sensorId = [valueTemperature.getAttribute('data-id'), valueHumidity.getAttribute('data-id'), valueGas.getAttribute('data-id')];
    const arrValueDevices = [valueTemperature, valueHumidity, valueGas];
    const arrStatusDevices = [valueStatusTemperature, valueStatusHumidity, valueStatusGas];
    const controlPanel = document.querySelector('.control-panel-body');
    document.querySelector('input#automatic').addEventListener('change', function() {
      ws.send(JSON.stringify({type: 'automatic', status: this.checked, idDevice: 4}));
      if (this.checked) {
        this.nextElementSibling.setAttribute('disabled','true');
      } else {
        this.nextElementSibling.removeAttribute('disabled');
      }
    });
    getLatestValue();


    const ws = new WebSocket('ws://localhost:8080');
    ws.onopen = function () {
      console.log('Connected to the WS Server');
      ws.send(JSON.stringify({ type: 'browser' }));
    }
    ws.onmessage = function (message) {
      const data = JSON.parse(message.data);
      switch (data.type) {
        case 'dataSensor':
          var { value, unit, idDevice } = data;
          if (idDevice == 1) {
            valueTemperature.textContent = `${value} Â°C`;
            valueStatusTemperature.textContent = 'Connected';
            valueTemperature.nextElementSibling.textContent = '';
            valueStatusTemperature.parentElement.classList.toggle('connected', true);
            valueStatusTemperature.parentElement.classList.toggle('disconnected', false);

          } else if (idDevice == 2) {
            valueHumidity.textContent = `${value} %`;
            valueStatusHumidity.textContent = 'Connected';
            valueHumidity.nextElementSibling.textContent = '';
            valueStatusHumidity.parentElement.classList.toggle('connected', true);
            valueStatusHumidity.parentElement.classList.toggle('disconnected', false);
          } else if (idDevice == 3) {
            valueGas.textContent = `${value} ppm`;
            valueStatusGas.textContent = 'Connected';
            valueGas.nextElementSibling.textContent = '';
            valueStatusGas.parentElement.classList.toggle('connected', true);
            valueStatusGas.parentElement.classList.toggle('disconnected', false);
          }
          break;
        case 'statusDevice':
          var { status, idDevice } = data;
          if (status == 0 && idDevice != 4 && idDevice != 5) {
            fetch(`http://localhost:8080/api/sensorsData/${idDevice}/latest`)
              .then(response => response.json())
              .then(data => {
                const { value, created_at } = data;
                if (idDevice == 1) {
                  valueTemperature.textContent = `${value} Â°C`;
                  valueTemperature.nextElementSibling.textContent = data.created_at;

                  valueStatusTemperature.textContent = 'Disconnected';
                  valueStatusTemperature.parentElement.classList.toggle('connected', false);
                  valueStatusTemperature.parentElement.classList.toggle('disconnected', true);
                } else if (idDevice == 2) {
                  valueHumidity.textContent = `${value} %`;
                  valueHumidity.nextElementSibling.textContent = data.created_at;

                  valueStatusHumidity.textContent = 'Disconnected';
                  valueStatusHumidity.parentElement.classList.toggle('connected', false);
                  valueStatusHumidity.parentElement.classList.toggle('disconnected', true);
                } else if (idDevice == 3) {
                  valueGas.textContent = `${value} ppm`;
                  valueGas.nextElementSibling.textContent = data.created_at;

                  valueStatusGas.textContent = 'Disconnected';
                  valueStatusGas.parentElement.classList.toggle('connected', false);
                  valueStatusGas.parentElement.classList.toggle('disconnected', true);
                } 
              });
          }
          if(idDevice ==4){
          
            controlPanel.querySelector('.control-panel-body__device[data-id="4"] button').classList.toggle('connected', !!status);
            controlPanel.querySelector('.control-panel-body__device[data-id="4"] button').classList.toggle('disconnected', !status);
            if(status) {
              controlPanel.querySelector('.control-panel-body__device[data-id="4"] svg path').style.fill = '#B3DCE0';
              controlPanel.querySelector('.control-panel-body__device[data-id="4"] button').textContent = 'ON';
            }else {
              controlPanel.querySelector('.control-panel-body__device[data-id="4"] svg path').style.fill = '#000';
              controlPanel.querySelector('.control-panel-body__device[data-id="4"] button').textContent = 'OFF';

            }
            
          }
          if (idDevice ==5) {
            controlPanel.querySelector('.control-panel-body__device[data-id="5"] button').classList.toggle('connected', !!status);
            controlPanel.querySelector('.control-panel-body__device[data-id="5"] button').classList.toggle('disconnected', !status);
            if(status) {
              controlPanel.querySelector('.control-panel-body__device[data-id="5"] svg path').style.fill = '#ffd600';
              controlPanel.querySelector('.control-panel-body__device[data-id="5"] button').textContent = 'ON';
            }else {
              controlPanel.querySelector('.control-panel-body__device[data-id="5"] svg path').style.fill = '#000';
              controlPanel.querySelector('.control-panel-body__device[data-id="5"] button').textContent = 'OFF';
            }
          }
          break;
        case 'signConnection' :
          var {status} = data;
          console.log('Nhan dc tin hieu tu ESP');
          isESPCONNECTED = status;
          console.log(isESPCONNECTED);
          if(isESPCONNECTED) {
            controlPanel.querySelectorAll('.control-panel-body__device .status').forEach(status => {
              status.style.display = 'none';
              status.nextElementSibling.style.display = 'block';
            });
          }else {
            controlPanel.querySelectorAll('.control-panel-body__device .status').forEach(status => {
              status.style.display = 'block';
              status.nextElementSibling.style.display = 'none';
            });
          }
          break;
        case 'toggleDevice':
          var {currentStatus, idDevice, isSuccess} = data;
          if(!isSuccess) {
            alert('Failed to toggle device');
          }else {
            if(idDevice == 4) {
              controlPanel.querySelector('.control-panel-body__device[data-id="4"] button').classList.toggle('connected', !!currentStatus);
              controlPanel.querySelector('.control-panel-body__device[data-id="4"] button').classList.toggle('disconnected', !currentStatus);
              if(!!currentStatus) {
                controlPanel.querySelector('.control-panel-body__device[data-id="4"] svg path').style.fill = '#B3DCE0';
                controlPanel.querySelector('.control-panel-body__device[data-id="4"] button').textContent = 'ON';
              }else {
                controlPanel.querySelector('.control-panel-body__device[data-id="4"] svg path').style.fill = '#000';
                controlPanel.querySelector('.control-panel-body__device[data-id="4"] button').textContent = 'OFF';
              }
            }
            if(idDevice == 5) {
              controlPanel.querySelector('.control-panel-body__device[data-id="5"] button').classList.toggle('connected', !!currentStatus);
              controlPanel.querySelector('.control-panel-body__device[data-id="5"] button').classList.toggle('disconnected', !currentStatus);
              if(!!currentStatus) {
                controlPanel.querySelector('.control-panel-body__device[data-id="5"] svg path').style.fill = '#ffd600';
                controlPanel.querySelector('.control-panel-body__device[data-id="5"] button').textContent = 'ON';
              }else {
                controlPanel.querySelector('.control-panel-body__device[data-id="5"] svg path').style.fill = '#000';
                controlPanel.querySelector('.control-panel-body__device[data-id="5"] button').textContent = 'OFF';
              }
            }
          }
        default:
          throw new Error('Invalid type');
        
      }
    };
    ws.onerror = function (error) {
      console.log('Error: ', error);
    };
    ws.onclose = function () {
      console.log('Close connection');
    }
    
    // control panel
    
    
    controlPanel.querySelectorAll('.control-panel-body__device').forEach(device => {
      const button = device.querySelector('button');
      const idDevice = device.getAttribute('data-id');
      button.addEventListener('click', () => {
        const status = button.classList.contains('connected');
        ws.send(JSON.stringify({ type: 'toggleDevice', idDevice, currentStatus: status ? 1 : 0 }));
      });
    });

    // switch on/off devices
    async function switchDevice(deviceId, status) {
      console.log(deviceId, status);
      const responese = await fetch(`http://localhost:8080/api/devices/${deviceId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status: status ? 1 : 0 })
      });
      return responese.json();
    }
    
    
    function getLatestValue() {
      for (let i = 0; i < arrValueDevices.length; i++) {
        fetch(`http://localhost:8080/api/sensorsData/${sensorId[i]}}/latest`)
          .then(response => response.json())
          .then(data => {
            console.log(data);
            switch (i+1) {
              case 1:
                arrValueDevices[i].textContent = `${data.value} Â°C`;
                break;
              case 2:
                arrValueDevices[i].textContent = `${data.value} %`;
                break;
              case 3:
                arrValueDevices[i].textContent = `${data.value} ppm`;
                break;
              default:
                arrValueDevices[i].textContent = data.value;
                break;
            }
            
            arrValueDevices[i].nextElementSibling.textContent = data.created_at.split('.')[0].replace('T', ' ');

            arrStatusDevices[i].textContent = 'Disconnected';
            arrStatusDevices[i].parentElement.classList.toggle('disconnected', true);
          });

      }
    }

    let dataId = 1;
    let dataUnit = 'celsius';
    let dataField = 'Temperature';
    let ecgChart;
    // Lua chon bieu do
    document.querySelectorAll('.menu-chart button').forEach(button => {
      button.addEventListener('click', () => {
        dataId = button.getAttribute('data-id');
        dataUnit = button.getAttribute('data-unit');
        dataField = button.getAttribute('data-field');
        if (ecgChart) {
          ecgChart.destroy();
        }
        showChart(dataId, dataUnit, dataField);
      })
    });
    let idInterval;
    //show chart
    function showChart(dataId, dataUnit, field) {
      fetch(`http://localhost:8080/api/sensorsData/${dataId}/latestTen`)
        .then(response => response.json())
        .then(data => {
          const labels = data.map(item => {
            let time = item.created_at.split('T')[1].split('.')[0];
            return time;
          })
          
          const length = data.length;
          const config = {
            type: 'line',
            data: {
              labels: labels,
              datasets: [
                {
                  label: `ECG Data ${field}`,
                  data: data.map(item => item.value),
                  borderColor: 'rgba(75,192,192,1)',
                  borderWidth: 1.5,
                  fill: false,
                  tension: 0.1
                }
              ]
            },
            options: {
              scales: {
                x: {
                  display: true,
                  title: {
                    display: true,
                    text: 'Time'
                  }
                },
                y: {
                  display: true,
                  title: {
                    display: true,
                    text: `${field} (${dataUnit})`
                  }
                }

              },

            }
          };
          const ctx = document.getElementById('ecgChart').getContext('2d');
          clearInterval(idInterval);
          ecgChart = new Chart(ctx, config);
          if (ecgChart) {
            idInterval = setInterval(() => {
              updateChart(dataId, dataUnit);
            }, 5000);
          }
        })

    }
    showChart(dataId, dataUnit, dataField);
    // update chart
    function updateChart(dataId) {
      fetch(`http://localhost:8080/api/sensorsData/${dataId}/latestTen`)
        .then(response => response.json())
        .then(data => {
          ecgChart.data.labels = data.map(item => {
            let time = item.created_at.split('T')[1].split('.')[0];
            return time;
          });
          ecgChart.data.datasets[0].data = data.map(item => item.value);
          ecgChart.update('none');
        })
    }




  });
</script>