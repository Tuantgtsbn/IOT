<div class="container content">
    <div class="parent action">
        <p class="heading">History Alter</p>
        <div class="choice row justify-content-between">
            <div class="list-field col-12 col-md-6 row">
                <div class="field col-12 col-md-6">
                    <label for="field" class="form-label"> Select Device</label>
                    <select name="field" id="field" class="form-select">
                        <option value=""selected>All</option>
                        {{#each devices}}
                        <option value="{{this.id}}">{{this.name}}</option>
                        {{/each}}
                    </select>
                </div>
                <div class="sort col-12 col-md-4">
                    <label for="sort" class="form-label" >Sort</label>
                    <select name="sort" id="sort" class="form-select">
                        <option value="1" selected>Ascending</option>
                        <option value="0">Descending</option>
                    </select>
                </div>
            </div>
            <div class="search col-12 col-md-3">
                <label for="date-search" class="form-label">Date</label>
                <form action="" class="form-search d-flex">
                    <input type="date" name="search" id="date-search" class="form-control me-2">
                    <button type="submit" class="btn btn-primary">Search</button>
                </form>
            </div>
        </div>

        <div class="table-data">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col">STT</th>
                        <th scope="col">Device</th>
                        <th scope="col">Message</th>
                        <th scope="col">Created at</th>
                        <th scope="col">Safe or Danger</th>
                        
                    </tr>
                </thead>
                <tbody>

                    {{!-- <tr>
                        <td>2024</td>
                        <td>34</td>
                        <td>celcius</td>
                    </tr> --}}

                </tbody>
            </table>
        </div>

        <div class="col-12">
            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-center list-number-pages">


                </ul>
            </nav>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const queries = {
            idDevice: '',
            limit: '',
            page: '',
            date: '',
            sort: 1,
        }
        let currentPage =1;
        const field = document.querySelector('#field');
        const time = document.querySelector('#date-search');
        const sort = document.querySelector('#sort');

        field.addEventListener('change', function (e) {
            queries.idDevice = e.target.value;
            queries.page = 1;
            const queryString = new URLSearchParams(queries).toString();
            currentPage = 1;
            updateTable(queryString);
        })

        time.addEventListener('change', function (e) {
            queries.time = e.target.value;
            queries.page = 1;
            const queryString = new URLSearchParams(queries).toString();
            currentPage = 1;
            updateTable(queryString);

        })
        sort.addEventListener('change', function (e) {
            queries.sort = e.target.value;
            queries.page = 1;
            const queryString = new URLSearchParams(queries).toString();
            currentPage = 1;
            updateTable(queryString);

        })

        function updateTable (queryString) {
            fetch(`http://localhost:8080/api/alerts?${queryString}`)
                .then(response => response.json())
                .then(data => {
                    const table = document.querySelector('.table-data tbody');
                    if(data.message){
                        table.innerHTML = `<tr><td colspan="5">${data.message}</td></tr>`;
                    }else{
                        currentPage = data.currentPage;
                    const dataLength = data.result.length;
                    const totalPages = data.totalPage;
                    table.innerHTML = '';
                    for(let i =0; i<dataLength; i++){
                        console.log(data.result[i]);
                        const tr = document.createElement('tr');
                        const stt = document.createElement('td');
                        const device = document.createElement('td');
                        const message = document.createElement('td');
                        const date = document.createElement('td');
                        const isSafe = document.createElement('td');
                        stt.textContent = queries.limit * (currentPage -1) + i +1;
                        date.textContent = data.result[i].created_at.split('.')[0].replace('T', ' ');
                        device.textContent = data.result[i].device;
                        message.textContent = data.result[i].message;
                        isSafe.textContent = data.result[i].isSafe ? 'Safe' : 'Danger';
                        tr.style.backgroundColor = data.result[i].isSafe ? '#4bd36f' : '#fe3939';
                        tr.appendChild(stt);
                        tr.appendChild(device);
                        tr.appendChild(message);
                        tr.appendChild(date);
                        tr.appendChild(isSafe);
                        table.appendChild(tr);
                    }
                    renderPagination(totalPages, currentPage);
                    }
                    
                })
        }
        function changePage(page){
            if(page === 'Previous'){
                currentPage--;
            }else if(page === 'Next'){
                currentPage++;
            }else{
                currentPage = page;
            }
            // Cập nhật query và gọi lại API để cập nhật bảng
            queries.page = currentPage;
            const queryString = new URLSearchParams(queries).toString();
            updateTable(queryString);
        }
        function renderPagination(totalPages, currentPage) {
    const list_pages = document.querySelector('.list-number-pages');
    let html = '';

    // Nút Previous
    html += `<li class="page-item ${currentPage <= 1 ? 'disabled' : ''}">
                <a class="page-link" href="#" data-page="Previous">Previous</a>
            </li>`;

    // Các số trang
    for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) {
        html += `<li class="page-item ${currentPage === i ? 'active' : ''}">
                    <a class="page-link" href="#" data-page="${i}">${i}</a>
                 </li>`;
    }

    // Nút Next
    html += `<li class="page-item ${currentPage >= totalPages ? 'disabled' : ''}">
                <a class="page-link" href="#" data-page="Next">Next</a>
            </li>`;

    list_pages.innerHTML = html;

    // Gán sự kiện click cho từng liên kết phân trang
    const pageLinks = document.querySelectorAll('.page-link');
    pageLinks.forEach(link => {
        link.addEventListener('click', (event) => {
            event.preventDefault(); // Ngăn điều hướng
            const page = event.target.getAttribute('data-page');
            if (page === 'Previous' || page === 'Next') {
                changePage(page);
            } else {
                changePage(Number(page));
            }
        });
    });
}
        queries.page = currentPage;
        updateTable(new URLSearchParams(queries).toString());
    })
</script>